/********************************************************
 * define.h
 *  Defines a lot of the code
 *
 *  Created on: Dec 7, 2015
 *      Author: Travis
 *******************************************************/

#ifndef DEFINE_H_
#define DEFINE_H_

// Pin Definitions
#define LCD_MOSI	0x0080	// data out at P1.7
#define LCD_SCK		0x0020	// serial clk at P1.5
#define LCD_RST 	0x0001	// reset at P2.0
#define LCD_CS		0x0002	// chip select at P2.1
#define LCD_DC		0x0004	// Data/Cmd at P2.2
#define BUTTON_A	0x0008	// Button closest to joystick
#define BUTTON_B	0x0010	// Button next to Button A
#define TS_XM		0x0001	// X- at P1.0 (Analog In)
#define TS_YP		0x0002	// Y+ at P1.1 (Analog In)
#define TS_XP		0x0004	// X+ at P1.2
#define TS_YM		0x0008	// Y- at P1.3

typedef struct TSPoint
{
	int x;
	int y;
	int z;
} TSPoint;

typedef struct Coord
{
	int x;
	int y;
} Coord;

// Color Definitions
#define RED			0xF800
#define GRN			0x07E0
#define DARKGREEN	0x17E0
#define BLU 		0x001F
#define BLK			0x0000
#define GREY		0x2222
#define CYAN 		0x07FF
#define MAGENTA 	0xF81F
#define YELLOW 		0xFFE0
#define DARKYELLOW  0xCCB0
#define WHITE 		0xFFFF

// Button X and Y values
#define XBEGIN	30
#define XEND	70
#define D1BEGIN	20
#define D1END	60
#define D2BEGIN 74
#define D2END	114
#define D3BEGIN	128
#define D3END	168
#define D4BEGIN 182
#define D4END	222
#define D5BEGIN 236
#define D5END	276

// font Definitions
	const char font[91][8] = {
	{0x3c, 0x66, 0x6e, 0x6e, 0x60, 0x62, 0x3c, 0x00},
	{0x00, 0x00, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00},
	{0x00, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x7c, 0x00},
	{0x00, 0x00, 0x3c, 0x60, 0x60, 0x60, 0x3c, 0x00},
	{0x00, 0x06, 0x06, 0x3e, 0x66, 0x66, 0x3e, 0x00},
	{0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00},
	{0x00, 0x0e, 0x18, 0x3e, 0x18, 0x18, 0x18, 0x00},
	{0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x7c},
	{0x00, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x00},
	{0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00},
	{0x00, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x3c},
	{0x00, 0x60, 0x60, 0x6c, 0x78, 0x6c, 0x66, 0x00},
	{0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00},
	{0x00, 0x00, 0x66, 0x7f, 0x7f, 0x6b, 0x63, 0x00},
	{0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00},
	{0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00},
	{0x00, 0x00, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60},
	{0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x06},
	{0x00, 0x00, 0x7c, 0x66, 0x60, 0x60, 0x60, 0x00},
	{0x00, 0x00, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x00},
	{0x00, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x0e, 0x00},
	{0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00},
	{0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00},
	{0x00, 0x00, 0x63, 0x6b, 0x7f, 0x3e, 0x36, 0x00},
	{0x00, 0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x00},
	{0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x0c, 0x78},
	{0x00, 0x00, 0x7e, 0x0c, 0x18, 0x30, 0x7e, 0x00},
	{0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00},
	{0x0c, 0x12, 0x30, 0x7c, 0x30, 0x62, 0xfc, 0x00},
	{0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00},
	{0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18},
	{0x00, 0x10, 0x30, 0x7f, 0x7f, 0x30, 0x10, 0x00},
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00},
	{0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00},
	{0x66, 0x66, 0xff, 0x66, 0xff, 0x66, 0x66, 0x00},
	{0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00},
	{0x62, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x46, 0x00},
	{0x3c, 0x66, 0x3c, 0x38, 0x67, 0x66, 0x3f, 0x00},
	{0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},
	{0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00},
	{0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00},
	{0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00},
	{0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00},
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30},
	{0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00},
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00},
	{0x00, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00},
	{0x3c, 0x66, 0x6e, 0x76, 0x66, 0x66, 0x3c, 0x00},
	{0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7e, 0x00},
	{0x3c, 0x66, 0x06, 0x0c, 0x30, 0x60, 0x7e, 0x00},
	{0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00},
	{0x06, 0x0e, 0x1e, 0x66, 0x7f, 0x06, 0x06, 0x00},
	{0x7e, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c, 0x00},
	{0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00},
	{0x7e, 0x66, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x00},
	{0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00},
	{0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00},
	{0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00},
	{0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30},
	{0x0e, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0e, 0x00},
	{0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00},
	{0x70, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x70, 0x00},
	{0x3c, 0x66, 0x06, 0x0c, 0x18, 0x00, 0x18, 0x00},
	{0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00},
	{0x18, 0x3c, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00},
	{0x7c, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x7c, 0x00},
	{0x3c, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3c, 0x00},
	{0x78, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0x78, 0x00},
	{0x7e, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7e, 0x00},
	{0x7e, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00},
	{0x3c, 0x66, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x00},
	{0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00},
	{0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00},
	{0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x6c, 0x38, 0x00},
	{0x66, 0x6c, 0x78, 0x70, 0x78, 0x6c, 0x66, 0x00},
	{0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00},
	{0x63, 0x77, 0x7f, 0x6b, 0x63, 0x63, 0x63, 0x00},
	{0x66, 0x76, 0x7e, 0x7e, 0x6e, 0x66, 0x66, 0x00},
	{0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00},
	{0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x00},
	{0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0e, 0x00},
	{0x7c, 0x66, 0x66, 0x7c, 0x78, 0x6c, 0x66, 0x00},
	{0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00},
	{0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00},
	{0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00},
	{0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00},
	{0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00},
	{0x66, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x66, 0x00},
	{0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00},
	{0x7e, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e, 0x00}};

// Function Prototypes
void updateScore(int*, int*, int);
void tallyValues(int*, int*);
void drawArrowSelector(int, int);
void displayChoices(int*);
int	chooseScore(int*);
void makeSelection(int*, int*);
void diceSelection(int*, int*, int*);
void drawSelector(int, int);
void drawSelect(int, int);
TSPoint calibratePoint(TSPoint rhs);
void calibrate(void);
void rollTheDice(int*);
void setup(void);
void drawDice(Coord *dice, int roll);
void fillScreen(int);
void drawPixel(int, int, int);
void writeLCDData(char);
void writeLCDControl(char);
void waitMS(unsigned int);
void initClk(void);
void initClkSlow(void);
void initPins(void);
void initLCD(void);
void initUSCI(void);
TSPoint getTSPoint(void);
Coord getJoyStick(void);
void drawLetter(const char[], int, int, int);
void writeWords(char[], int, int, int);
void iToC(char [], int);
void iToC1(char [], int);
void iToC2(char [], int);
void fToC(char [], float);
long map(long, long, long, long, long);
void fillRectangle(int, int, int, int, int);
void fillCircle(int , int, int, int);
void fillCircleHelper(int, int, int, unsigned char, int, int);
void drawRect(int, int, int, int, int);
void drawFastVLine(int, int, int, int);
void drawFastHLine(int, int, int, int);
void writeLine(char [], int, int, int, char);
int rotateX(int, int);
int rotateY(int, int);

// used for writing text to the screen
volatile int startX = 0x0004;
volatile int startY = 0x0004;

// For calibration
unsigned int yMin;
unsigned int yMax;
unsigned int xMin;
unsigned int xMax;
unsigned int zMin;
unsigned int zMax;

#endif /* DEFINE_H_ */
