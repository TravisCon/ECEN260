//******************************************************************************
//  MSP430G2553 Demo - 	AdaFruit Display 2.8in 320x240pixels
//						Color Display Touchscreen Communications
// 						SPI Mode
//
//	LCD_RST  = P2.0 (RST on display board)
//	LCD_CS   = P2.1 (CS on display board)
//	LCD_DC	 = P2.2 (D/C on display board)
//	LCD_SCK  = P1.5 (SCK on display board)
//	LCD_MOSI = P1.7 (MOSI on display board)
//  VCC = Vin on display board
//	GND = GND on display board
//
//******************************************************************************
#include "msp430g2553.h"
#include <time.h>
#include "define.h"
#include "random.h"

void main(void)
{
	char cNumber[5];
	Coord joy;
	int done = 0;
	int dice[5];
	int game[13] = {-1, 12, -1,
					-1, 25, -1,
					6, -1, -1,
					12, -1, -1, -1};

	WDTCTL = WDTPW + WDTHOLD;           // Stop watchdog timer

	setup();
	//Polling loop for button presses
	do
	{
		rollTheDice(&dice);
		waitMS(500);
		makeSelection(&game, &dice);

	}
	while (!done);
}

int chooseScore(int * game)
{
	Coord joy;
	int selection = 0;
	displayChoices(game);

	while(1)
	{
		joy = getJoyStick();
		waitMS(50);

		drawArrowSelector(selection, YELLOW);

		if (joy.y > 700)
		{
			drawArrowSelector(selection, WHITE);
			do
			{
				selection++;
				selection = selection % 13;
			}
			while(game[selection] > -1);
			waitMS(50);
		}
		else if (joy.y < 400)
		{
			drawArrowSelector(selection, WHITE);
			do
			{
				if (selection < 1)
					selection = 12;
				else
					selection--;
			}
			while(game[selection] > -1);
			waitMS(50);
		}

		if (!(P2IN & BUTTON_A))
			break;

		drawArrowSelector(selection, YELLOW);
	}

	return selection;
}

void makeSelection(int *game, int *dice)
{
	int numValues[6] = {0, 0, 0, 0, 0, 0};

	int selection = chooseScore(game);

	tallyValues(dice, &numValues);

	updateScore(&numValues, game, selection);

	fillRectangle(74, 230, 10, 280, WHITE);
	waitMS(2000);
}

void diceSelection(int * dice, int * keep, int * selection)
{
	Coord joy;
	joy = getJoyStick();
	waitMS(50);

	drawSelector(*selection, DARKYELLOW);
	int l;
	for (l = 0; l < 5; l++)
	{
		if (keep[l])
			drawSelect(l + 1, GREY);
		else
			drawSelect(l + 1, WHITE);
	}

	if (joy.y > 700)
	{
		drawSelector(*selection, WHITE);
		(*selection)++;
		*selection = (*selection) % 5;
		waitMS(50);
	}
	else if (joy.y < 400)
	{
		drawSelector(*selection, WHITE);
		if (*selection < 1)
			*selection = 4;
		else
			(*selection)--;

		waitMS(50);
	}

	if (!(P2IN & BUTTON_A))
	{
		keep[*selection] ^= 0x01;
		while(!(P2IN & BUTTON_A))
			;
	}

	drawSelector(*selection, DARKYELLOW);
}

void updateScore(int * numValues, int * game, int selection)
{
	int isFullHouse = 0;
	int isStraight = 0;
	int straight = 0;
	selection++;
	int i;
	int j;
	// Now this is the hard part

	switch (selection)
	{
	case 1:
		game[0] = (numValues[0] * 1);
		break;
	case 2:
		game[1] = (numValues[1] * 2);
		break;
	case 3:
		game[2] = (numValues[2] * 3);
		break;
	case 4:
		game[3] = (numValues[3] * 4);
		break;
	case 5:
		game[4] = (numValues[4] * 5);
		break;
	case 6:
		game[5] = (numValues[5] * 6);
		break;
	case 7: // 3 of a kind
		for (i = 0; i < 6; i++)
			if (numValues[i] >= 3)
				{
					for (j = 0; j < 6; j++)
						game[6] += numValues[j] * (j + 1);
					break;
	            }
			else
				game[6] = 0;
		break;
	case 8: //	 4 of a kind
		for (i = 0; i < 6; i++)
			if (numValues[i] >= 4)
			{
				for (j = 0; j < 6; j++)
					game[7] += numValues[j] * (j + 1);
				break;
	        }
	            else
	            	game[7] = 0;
		break;
	case 9: // Full House
		for (i = 0; i < 6; i++)
		{
			if (numValues[i] == 3)
				for (j = 0; j < 6; j++)
					if (numValues[j] == 2)
						isFullHouse = 1;
			if (isFullHouse)
				game[8] = 25;
			else
				game[8] = 0;
		}
		break;
	case 10: // Small Straight
		for (i = 0; i < 6; i++)
		{
			if (numValues[i] > 0)
				straight++;
			else
				straight = 0;

			if (straight > 3)
				isStraight = 1;

		}
		if (isStraight)
			game[9] = 30;
		else
			game[9] = 0;
		break;
	case 11: // Large Straight
		for (i = 0; i < 6; i++)
		{
			if (numValues[i] > 0)
				straight++;
			else
				straight = 0;

			if (straight > 4)
				isStraight = 1;
		}
		if (isStraight)
			game[10] = 40;
		else
			game[10] = 0;
		break;
	case 12: // Chance
		for (i = 0; i < 6; i++)
			game[11] += numValues[i] * (i + 1);
		break;
	case 13: // YAHTZEE!
		for (i = 0; i < 6; i++)
			if (numValues[i] == 5)
				game[12] = 50;
	         break;
	default:
		game[selection] = 0;
	}
}

void tallyValues(int *dice, int *numValues)
{
	int i = 0;
	for (i = 0; i < 5; i++)
		numValues[dice[i] - 1]++;
}

void rollTheDice(int *dice)
{
	char cNumber[5];
	Coord diceCoord;
	int random;
	int selection;
	int keep[5] = {0, 0, 0, 0, 0};

	int i;
	int j;
	int k;
	int l;
	for (i = 0; i < 3; i++)
	{
		srand(get_rand(1,1000));
		selection = 0;

		for (j = 0; j < 10; j++)
		{
			waitMS(10);

			diceCoord.x = 30;
			diceCoord.y = 20;
			for (k = 0; k < 5; ++k)
			{
				if (!keep[k])
				{
					//random = get_rand(1, 6);
					random = (rand() % 6) + 1;
					drawDice(&diceCoord, random);
					dice[k] = random;
				}
				diceCoord.y += 54;
			}
		}

		if (i < 2)
		{
			startX = 123;
			startY = 40;
			writeWords("Select the", BLK, 1, WHITE);
			startX = 110;
			startY += 8;
			writeWords("dice that you", BLK, 1, WHITE);
			startX = 124;
			startY += 8;
			writeWords("would like", BLK, 1, WHITE);
			startX = 132;
			startY += 8;
			writeWords("to keep", BLK, 1, WHITE);

			while(1)
			{
				diceSelection(&dice, &keep, &selection);

				if (!(P2IN & BUTTON_B))
				{
					drawSelector(selection, WHITE);
					break;
				}
			}
		}
		else
		{
			for (l = 0; l < 5; l++)
				drawSelect(l + 1, WHITE);

			fillRectangle(109, 230, 10, 100, WHITE);
		}
	}
}

void drawArrowSelector(int selector, int color)
{
	int x = 80;
	int y = 43 + (16 * selector);

	drawPixel(x + 1, y, color);
	drawFastVLine(x    , y - 1, 3, color);
	drawFastVLine(x - 1, y - 2, 5, color);
	drawFastVLine(x - 2, y - 3, 7, color);
	drawFastVLine(x - 3, y - 4, 9, color);
	drawFastVLine(x - 4, y - 5, 11,color);
}

void drawSelector(int selector, int color)
{
	switch(selector)
	{
	case 0:
		drawRect(XBEGIN - 5, D1BEGIN - 5, 51, 51, color);
		drawRect(XBEGIN - 6, D1BEGIN - 6, 53, 53, color);
		break;
	case 1:
		drawRect(XBEGIN - 5, D2BEGIN - 5, 51, 51, color);
		drawRect(XBEGIN - 6, D2BEGIN - 6, 53, 53, color);
		break;
	case 2:
		drawRect(XBEGIN - 5, D3BEGIN - 5, 51, 51, color);
		drawRect(XBEGIN - 6, D3BEGIN - 6, 53, 53, color);
		break;
	case 3:
		drawRect(XBEGIN - 5, D4BEGIN - 5, 51, 51, color);
		drawRect(XBEGIN - 6, D4BEGIN - 6, 53, 53, color);
		break;
	case 4:
		drawRect(XBEGIN - 5, D5BEGIN - 5, 51, 51, color);
		drawRect(XBEGIN - 6, D5BEGIN - 6, 53, 53, color);
		break;
	}
}

void drawSelect(int select, int color)
{
	int y;

	switch(select)
	{
		case 1:
			y = D1BEGIN;
			break;
		case 2:
			y = D2BEGIN;
			break;
		case 3:
			y = D3BEGIN;
			break;
		case 4:
			y = D4BEGIN;
			break;
		case 5:
			y = D5BEGIN;
			break;
	}

	drawRect(XBEGIN - 2, y - 2, 45, 45, color);
	drawRect(XBEGIN - 3, y - 3, 47, 47, color);
	if (color == WHITE)
	{
		drawFastHLine(XBEGIN + 3, y - 1, 36, WHITE);
		drawFastVLine(XBEGIN - 1, y + 3, 36, WHITE);
	}
	else
	{
		drawFastHLine(XBEGIN + 3, y - 1, 36, BLK);
		drawFastVLine(XBEGIN - 1, y + 3, 36, BLK);
	}
}

void drawDice(Coord *dice, int roll)
{
	fillRectangle(dice->x, dice->x + 40, dice->y, dice->y + 40, RED);

	//Round the corners
	drawPixel(dice->x     , dice->y     , WHITE); //Upper left
	drawPixel(dice->x + 1 , dice->y     , WHITE);
	drawPixel(dice->x     , dice->y + 1 , WHITE);
	drawPixel(dice->x + 40, dice->y     , WHITE); //Upper right
	drawPixel(dice->x + 40, dice->y + 1 , WHITE);
	drawPixel(dice->x + 39, dice->y     , WHITE);
	drawPixel(dice->x     , dice->y + 40, WHITE); //Bottom left
	drawPixel(dice->x + 1 , dice->y + 40, WHITE);
	drawPixel(dice->x     , dice->y + 39, WHITE);
	drawPixel(dice->x + 40, dice->y + 40, WHITE); //Bottom Right
	drawPixel(dice->x + 39, dice->y + 40, BLK);
	drawPixel(dice->x + 40, dice->y + 39, BLK);
	//Draw Black outline
	drawFastHLine(dice->x + 3 , dice->y + 41, 36, BLK);
	drawFastVLine(dice->x + 41, dice->y + 3 , 36, BLK);

	switch(roll)
	{
	case 1:
		fillCircle(dice->x + 20, dice->y + 20, 4, WHITE);
		break;
	case 2:
		fillCircle(dice->x + 10, dice->y + 10, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 30, 4, WHITE);
		break;
	case 3:
		fillCircle(dice->x + 10, dice->y + 10, 4, WHITE);
		fillCircle(dice->x + 20, dice->y + 20, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 30, 4, WHITE);
		break;
	case 4:
		fillCircle(dice->x + 10, dice->y + 10, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 10, 4, WHITE);
		fillCircle(dice->x + 10, dice->y + 30, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 30, 4, WHITE);
		break;
	case 5:
		fillCircle(dice->x + 10, dice->y + 10, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 10, 4, WHITE);
		fillCircle(dice->x + 10, dice->y + 30, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 30, 4, WHITE);
		fillCircle(dice->x + 20, dice->y + 20, 4, WHITE);
		break;
	case 6:
		fillCircle(dice->x + 10, dice->y +  8, 4, WHITE);
		fillCircle(dice->x + 10, dice->y + 20, 4, WHITE);
		fillCircle(dice->x + 10, dice->y + 32, 4, WHITE);
		fillCircle(dice->x + 30, dice->y +  8, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 20, 4, WHITE);
		fillCircle(dice->x + 30, dice->y + 32, 4, WHITE);
		break;
	default:
		fillCircle(dice->x + 20, dice->y + 20, 18, WHITE);
	}
}

void setup(void)
{
	xMin = 120;	// Default Values
	xMax = 860; // for the screen edges
	yMin = 300;
	yMax = 880;
	zMin = 40;
	zMax = 600;

	TSPoint p;
	TSPoint pc;
	initClk();		// Init clock to 16 MHz
	initPins();		// Init Pin Functionality
  	initUSCI();		// Init USCI (SPI)
  	P2OUT &= ~LCD_RST;
  	waitMS(500);
  	P2OUT = LCD_RST;
  	initLCD();			// Init LCD Controller

  	//calibrate();
  	fillScreen(BLU);
  	//void drawRect(int x, int y, int w, int h, int color)
  	drawRect(10, 10, 221, 281, 0x001B);
  	drawRect( 9,  9, 223, 283, 0x0019);
  	drawRect( 8,  8, 225, 285, 0x0017);
  	fillRectangle(10, 230, 10, 290, WHITE);

  	startX = 70;
  	startY = 40;
  	writeWords("Touch", BLK, 2, WHITE);
  	startX = 60;
  	startY += 40;
  	writeWords("Screen", BLK, 2, WHITE);
  	startX = 90;
  	startY += 40;
  	writeWords("To", BLK, 2, WHITE);
  	startX = 70;
  	startY += 40;
  	writeWords("Begin", BLK, 2, WHITE);

  	while(1)
  	{
  		p = getTSPoint();
  		pc = calibratePoint(p);
  		if (pc.z > 20)
  			break;
  	}

  	startX = 60;
  	startY = 300;
  	writeWords("Player 1", WHITE, 2, BLU);
  	fillRectangle(10, 230, 10, 290, WHITE);
}

void fillScreen(int color)
{
	unsigned int i;

	writeLCDControl(0x2A);				// Select Column Address
	writeLCDData(0);					// Setup beginning column address
	writeLCDData(0);					// Setup beginning column address
	writeLCDData(0);					// Setup ending column address
	writeLCDData(239);					// Setup ending column address

	writeLCDControl(0x2B);				// Select Row Address
	writeLCDData(0);					// Setup beginning row address
	writeLCDData(0);					// Setup beginning row address
	writeLCDData(0x01);					// Setup ending row address
	writeLCDData(0x3F);					// Setup ending row address

	writeLCDControl(0x2C);				// Select Memory Write
	for (i = 240*161; i > 0 ; i--)		// Loop through all memory locations 16 bit color
	{
		writeLCDData(color >> 8);		// Write data to LCD memory
		writeLCDData(color & 0xff);		// Write data to LCD memory
		writeLCDData(color >> 8);		// Write data to LCD memory
		writeLCDData(color & 0xff);		// Write data to LCD memory
	}
}

void fillRectangle(int xStart, int xEnd, int yStart, int yEnd, int color)
{
	unsigned int i;
	writeLCDControl(0x2A);				// Select Row Address
	writeLCDData(xStart >> 8);			// Starting x Address (Most Sig 8 bits of address)
	writeLCDData(xStart & 0xff);		// Starting x Address (Least Sig 8 bits of address)
	writeLCDData(xEnd >> 8);			// Ending x Address (Most Sig 8 bits of address)
	writeLCDData(xEnd & 0xff);			// Ending x Address (Least Sig 8 bits of address)

	writeLCDControl(0x2B);				// Select Column Address
	writeLCDData(yStart >> 8);			// Starting y Address (Most Sig 8 bits of address)
	writeLCDData(yStart & 0xff);		// Starting y Address (Least Sig 8 bits of address)
	writeLCDData((yEnd) >> 8);			// Ending y Address (Most Sig 8 bits of address)
	writeLCDData((yEnd) & 0xff);		// Ending y Address (Least Sig 8 bits of address)

	writeLCDControl(0x2C);				// Select Memory Write
	for (i = (xEnd - xStart + 1)*(yEnd - yStart + 1); i > 0 ; i--)		// Loop through all memory locations 16 bit color
	{
		writeLCDData(color >> 8);			// Send Most Significant 8 bits of 16 bit color
		writeLCDData(color & 0xff);			// Send Least Significant 8 bits of 16 bit color
	}
}

void fillCircle(int x0, int y0, int r, int color)
{
  drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void fillCircleHelper(int x0, int y0, int r, unsigned char cornername, int delta, int color)
{
  int f = 1 - r;
  int ddF_x = 1;
  int ddF_y = -2 * r;
  int x = 0;
  int y = r;

  while (x<y) {
    if (f >= 0) {
      y--;
      ddF_y += 2;
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;

    if (cornername & 0x1) {
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    }
    if (cornername & 0x2) {
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    }
  }
}

void drawRect(int x, int y, int w, int h, int color)
{
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
}

void drawFastVLine(int x, int y, int h, int color)
{
	fillRectangle(x, x, y, y+h-1, color);
}


void drawFastHLine(int x, int y, int w, int color)
{
  fillRectangle(x, x+w-1, y, y, color);
}

Coord getJoyStick(void)
{
	// Initialize x and y coordinates
	int x = 0;
	int y = 0;
	Coord stick;

	ADC10AE0 = 0x50;		// P1.4 and P1.6 ADC option select
							// Bits 01010000
	// A4 input
	ADC10CTL0 = 0x1010;		// Sample/Hold time and ADC on
	ADC10CTL1 = 0x4000;		// Input A4 into ADC
	ADC10CTL0 |= 0x003;		// Sampling conversion start
	while(ADC10CTL1 & 0x001);	// Wait for conversion to complete
	x = ADC10MEM;			// read ADC value
	// A6 input
	ADC10CTL0 = 0x1010;		// Sample/Hold time and ADC on
	ADC10CTL1 = 0x6000;		// Input A6 into ADC
	ADC10CTL0 |= 0x003;		// Sampling conversion start
	while(ADC10CTL1 & 0x001);	// Wait for conversion to complete
	y = ADC10MEM;			// read ADC value

	// Set joystick values
	stick.x = x;
	stick.y = y;

	return stick;
}

TSPoint calibratePoint(TSPoint rhs)
{
	TSPoint lhs;
	lhs = getTSPoint();

	// Error checking
	if (rhs.x < xMin)
		rhs.x = xMin;
	if (rhs.x > xMax)
		rhs.x = xMax;
	if (rhs.y < yMin)
		rhs.y = yMin;
	if (rhs.y > yMax)
		rhs.y = yMax;
	if (rhs.z < zMin)
		rhs.z = zMin;
	if (rhs.z > zMax)
		rhs.z = zMax;

	// Have to do individual math, because
	// order of operations is broken in C
	float xDivisor = xMax  - xMin;
	float yDivisor = yMax  - yMin;
	float zDivisor = zMax  - zMin;
	float xCoeff   = rhs.x - xMin;
	float yCoeff   = rhs.y - yMin;
	float zCoeff   = rhs.z - zMin;

	// Where the real conversion happens
	// Multiply Coefficient by screen size,
	// And then divide by screen width in p.x/p,y terms
	lhs.x = xCoeff * 239 / xDivisor;
	lhs.y = yCoeff * 319 / yDivisor;
	lhs.z = zCoeff * 100 / zDivisor;

	//More error checking
	if (lhs.x < 0)
		lhs.x = 0;
	if (lhs.x > 239)
		lhs.x = 239;
	if (lhs.y < 0)
		lhs.y = 0;
	if (lhs.y > 319)
		lhs.y = 319;
	if (lhs.z < 10)
		lhs.z = 0;
	if (lhs.z > 100)
		lhs.z = 100;

	return lhs;
}

void calibrate(void)
{
	fillScreen(WHITE);
	TSPoint p;

	//Instructions on screen
	startX = 200;
	startY = 160;
	writeWords("Touch Circles", BLK, 2, WHITE);
	startX = 20;
	startY = 200;
	writeWords("Hold for 2 Seconds", BLK, 1, WHITE);

	//Touch circles one by one until calibrated
	fillCircle(15, 15, 15, RED);
	while (1) //Top Left
	{
		waitMS(2000);
		p = getTSPoint();

		if (p.z > 50)
		{
			xMin = p.x;
			yMin = p.y;
			yMax = p.z;
			break;
		}
		else
			zMin = p.z;
	}
	//Clear circle
	fillCircle(15, 15, 15, WHITE);

	fillCircle(224, 15, 15, RED);
	while (1) //Top Right
	{
		waitMS(2000);
		p = getTSPoint();

		if (p.z > 50)
		{
			xMax = p.x;
			yMin = (p.y + yMin) / 2; //Average of values
			zMax = (p.z + zMax) / 2; //Average
			break;
		}
		else
			zMin = (p.z + zMin) / 2; //Average
	}
	//Clear circle
	fillCircle(224, 15, 15, WHITE);

	fillCircle(15, 304, 15, RED);
	while (1) //Bottom Left
	{
		waitMS(2000);
		p = getTSPoint();

		if (p.z > 50)
		{
			xMin = (p.x + xMin) / 2; //Average
			yMax = p.y;
			zMax = (p.z + zMax) / 2; //Average
			break;
		}
		else
			zMin = (p.z + zMin) / 2; //Average
	}
	//Clear circle
	fillCircle(15, 304, 15, WHITE);

	fillCircle(224, 304, 15, RED);
	while (1) //Bottom Right
	{
		waitMS(2000);
		p = getTSPoint();

		if (p.z > 50)
		{
			xMax = (p.x + xMax) / 2; //Average
			yMax = (p.y + yMax) / 2; //Average
			zMax = (p.z + zMax) / 2; //Average
			break;
		}
		else
			zMin = (p.z + zMin) / 2; //Average
	}
	//Clear Circle
	fillCircle(224, 304, 15, WHITE);

	//Add values since its hard to touch the actual corners
	xMin -= 15;
	xMax += 15;
	yMin -= 15;
	yMax += 15;
	//Make sure the z isn't too sensative
	zMin += 50;
	zMax += 200;
}

void drawPixel(int x, int y, int color)
{
	writeLCDControl(0x2A);				// Select Column Address
	writeLCDData(x >> 8);				// Starting x Address (Most Sig 8 bits of address)
	writeLCDData(x & 0xff);				// Starting x Address (Least Sig 8 bits of address)
	writeLCDData(x >> 8);				// Ending x Address (Most Sig 8 bits of address)
	writeLCDData(x & 0xff);				// Ending x Address (Least Sig 8 bits of address)

	writeLCDControl(0x2B);				// Select Row Address
	writeLCDData(y >> 8);				// Starting y Address (Most Sig 8 bits of address)
	writeLCDData(y & 0xff);				// Starting y Address (Least Sig 8 bits of address)
	writeLCDData(y >> 8);				// Ending y Address (Most Sig 8 bits of address)
	writeLCDData(y & 0xff);				// Ending y Address (Least Sig 8 bits of address)

	writeLCDControl(0x2C);				// Select Color to write to the pixel
	writeLCDData(color >> 8);			// Send Most Significant 8 bits of 16 bit color
	writeLCDData(color & 0xff);			// Send Least Significant 8 bits of 16 bit color
}

void writeLCDControl(char data)
{
	P2OUT &= ~LCD_DC;					// DC low
	P2OUT &= ~LCD_CS;					// CS Low

  	while(IFG2&UCB0TXIFG);				// TX buffer ready?
  	UCB0TXBUF=data;						// start transmission

    return;
}

void writeLCDData(char data)
{
	P2OUT |= LCD_DC;					// DC high
	P2OUT &= ~LCD_CS;					// CS Low

	while(IFG2&UCB0TXIFG);				// TX buffer ready?
  	UCB0TXBUF=data;						// start transmission

    return;
}

void waitMS(unsigned int m_sec)
{
	while(m_sec--)
		__delay_cycles(16000);			// 1000 for 1MHz
}

void initLCD(void)
{
    P1OUT = 0x00;						// Set all outputs low for initialization
    P2OUT = LCD_RST | LCD_CS | LCD_DC;

	P2OUT |= LCD_RST;					// Reset LCD
	waitMS(10);
	P2OUT &= ~LCD_RST;
	waitMS(10);
	P2OUT |= LCD_RST;
	waitMS(100);

	writeLCDControl(0xEF);				//
	writeLCDData(0x03);
	writeLCDData(0x80);
	writeLCDData(0x02);

	writeLCDControl(0xCF);				// Power Control B
	writeLCDData(0x00);
	writeLCDData(0xC1);
	writeLCDData(0x30);

	writeLCDControl(0xED);				// Power On Sequence Control
	writeLCDData(0x64);
	writeLCDData(0x03);
	writeLCDData(0x12);
	writeLCDData(0x81);

	writeLCDControl(0xE8);				// Driver Timing Control A
	writeLCDData(0x85);
	writeLCDData(0x00);
	writeLCDData(0x78);

	writeLCDControl(0xCB);				// Power Control A
	writeLCDData(0x39);
	writeLCDData(0x2C);
	writeLCDData(0x00);
	writeLCDData(0x34);
	writeLCDData(0x02);

	writeLCDControl(0xF7);				// Pump Ration Control
	writeLCDData(0x20);

	writeLCDControl(0xEA);				// Driver Timing Control A
	writeLCDData(0x00);
	writeLCDData(0x00);

	writeLCDControl(0xC0); 				// Power Control 1
	writeLCDData(0x23);

	writeLCDControl(0xC1);    			// Power Control 2
	writeLCDData(0x10);

	writeLCDControl(0xC5);    			// VCOM Control
	writeLCDData(0x3e);
	writeLCDData(0x28);

	writeLCDControl(0xC7);    			// VCOM Control2
	writeLCDData(0x86);

	writeLCDControl(0x36);    			// Memory Access Control
	writeLCDData(0x48);

	writeLCDControl(0x3A);				// COLMOD Pixel Format Set
	writeLCDData(0x55);

	writeLCDControl(0xB1);				// Frame Rate Control
	writeLCDData(0x00);
	writeLCDData(0x18);

	writeLCDControl(0xB6);    			// Display Function Control
	writeLCDData(0x08);
	writeLCDData(0x82);
	writeLCDData(0x27);

	writeLCDControl(0xF2);    			// 3Gamma Control
	writeLCDData(0x00);

	writeLCDControl(0x26);    			// Gamma curve selected
	writeLCDData(0x01);

	writeLCDControl(0xE0);   			// Positive Gamma Correction
	writeLCDData(0x0F);
	writeLCDData(0x31);
	writeLCDData(0x2B);
	writeLCDData(0x0C);
	writeLCDData(0x0E);
	writeLCDData(0x08);
	writeLCDData(0x4E);
	writeLCDData(0xF1);
	writeLCDData(0x37);
	writeLCDData(0x07);
	writeLCDData(0x10);
	writeLCDData(0x03);
	writeLCDData(0x0E);
	writeLCDData(0x09);
	writeLCDData(0x00);

	writeLCDControl(0xE1);    			// Negative Gamma Correction
	writeLCDData(0x00);
	writeLCDData(0x0E);
	writeLCDData(0x14);
	writeLCDData(0x03);
	writeLCDData(0x11);
	writeLCDData(0x07);
	writeLCDData(0x31);
	writeLCDData(0xC1);
	writeLCDData(0x48);
	writeLCDData(0x08);
	writeLCDData(0x0F);
	writeLCDData(0x0C);
	writeLCDData(0x31);
	writeLCDData(0x36);
	writeLCDData(0x0F);

	writeLCDControl(0x11);    			// Exit Sleep
	writeLCDControl(0x29);    			// Display on
}

void initUSCI(void)
{
  	UCB0CTL1|=UCSWRST;					// USCI in reset state
  	UCB0CTL0|=UCMST+UCSYNC+UCCKPH+UCMSB;// SPI Master, 8bit, MSB first, synchronous mode
  	UCB0CTL1|=UCSSEL_2;					// USCI CLK-SRC=SMCLK=~8MHz
  	UCB0CTL1&=~UCSWRST;					// USCI released for operation
  	IE2|=UCB0TXIE;						// enable TX interrupt
  	IFG2&=~UCB0TXIFG;

  	_EINT();							// enable interrupts
}

TSPoint getTSPoint(void)
{
	int x=0, y=0, z=0;
	int sample;
 	TSPoint location;

	//
	// Code to read the X position on the touchscreen
	//
	P1DIR &= ~TS_YP;		// Y+ set to input
	P1DIR &= ~TS_YM;		// Y- set to input
	P1DIR |= TS_XP;			// X+ set to output
	P1DIR |= TS_XM;			// X- set to output

	P1OUT |= TS_XP;			// X+ set to high
	P1OUT &= ~TS_XM;		// X- set to low

	ADC10CTL0 = 0x1010; 	// Sampling and conversion start
	ADC10CTL1 = 0x1000; 	// Input A1 into ADC
	ADC10AE0 = TS_YP;		// P1.1 ADC option select
	ADC10CTL0 |= 0x0003; 	// Sampling and conversion start
	while (ADC10CTL1 & 0x0001); // Wait for conversion to complete - ADC10BUSY?
	sample = ADC10MEM; 		// Read ADC value
	x = (1023 - sample);	// Set top left corner = 0

	//
	// Code to read the Y position on the touchscreen
	//
	P1DIR &= ~TS_XP;		// X+ set to input
	P1DIR &= ~TS_XM;		// X- set to input
	P1DIR |= TS_YP;			// Y+ set to output
	P1DIR |= TS_YM;			// Y- set to output

	P1OUT |= TS_YP;			// Y+ out set high
	P1OUT &= ~TS_YM;		// Y- out set low

	ADC10CTL0 = 0x1010; 	// Sampling and conversion start
	ADC10CTL1 = 0x0000; 	// Input A0(X-) into ADC
	ADC10AE0 = TS_XM;		// P1.0 ADC option select
	ADC10CTL0 |= 0x0003; 	// Sampling and conversion start
	while (ADC10CTL1 & 0x0001); // Wait for conversion to complete - ADC10BUSY?
	sample = ADC10MEM; 		// Read ADC value
	y = (1023 - sample);	// Set top left corner = 0

	//
	// Code to read the Z position on the touchscreen
	//
	P1DIR |= TS_YM;			// Y- set to output
	P1DIR &= ~TS_YP;		// Y+ set to input
	P1DIR &= ~TS_XM;		// X- set to input
	P1DIR |= TS_XP;			// X+ set to output

 	P1OUT |= TS_YM;			// Set Y- high
	P1OUT &= ~TS_XP;		// Set X+ low

	ADC10CTL0 = 0x1010; 	// Sampling and conversion start
 	ADC10CTL1 = 0x0000; 	// Input A0(X-) into ADC
	ADC10AE0 = TS_XM;		// P1.0 ADC option select
	ADC10CTL0 |= 0x0003; 	// Sampling and conversion start
 	while (ADC10CTL1 & 0x0001); // Wait for conversion to complete - ADC10BUSY?
 	int z1= ADC10MEM; 		// Read ADC value

	ADC10CTL0 = 0x1010; 	// Sampling and conversion start
 	ADC10CTL1 = 0x1000; 	// Input A1(Y+) into ADC
	ADC10AE0 = TS_YP;		// P1.1 ADC option select
 	ADC10CTL0 |= 0x0003; 	// Sampling and conversion start
 	while (ADC10CTL1 & 0x0001); // Wait for conversion to complete - ADC10BUSY?
 	int z2= ADC10MEM; 		// Read ADC value

	z = (1023-(z2-z1));

 	location.x = x;
 	location.y = y;
 	location.z = z;

 	return location;
}

void drawLetter(const char letter[], int color, int fSize, int hColor)
{

	int repeatX;
	int repeatY;
	char mask;
	unsigned int i;
	unsigned int j;
	writeLCDControl(0x2A);				// Select Row Address
	writeLCDData(startX >> 8);			// Starting x Address (Most Sig 8 bits of address)
	writeLCDData(startX & 0xff);		// Starting x Address (Least Sig 8 bits of address)
	startX += ((8 * fSize)-1);
	writeLCDData(startX >> 8);			// Ending x Address (Most Sig 8 bits of address)
	writeLCDData(startX & 0xff);		// Ending x Address (Least Sig 8 bits of address)

	writeLCDControl(0x2B);				// Select Column Address
	writeLCDData(startY >> 8);			// Starting y Address (Most Sig 8 bits of address)
	writeLCDData(startY & 0xff);		// Starting y Address (Least Sig 8 bits of address)
	writeLCDData((startY + ((8*fSize)-1)) >> 8);	// Ending y Address (Most Sig 8 bits of address)
	writeLCDData((startY + ((8*fSize)-1)) & 0xff);	// Ending y Address (Least Sig 8 bits of address)

	startX++;

	writeLCDControl(0x2C);				// Select Memory Write
	for (i = 0; i < 8; i++)				// Loop through all characters in array
	{
		repeatY = fSize;
		while(repeatY > 0)
		{
			repeatY--;
			mask = 0x80;
			for (j = 0; j < 8; j++)			// loop through all bits in character
			{
				repeatX = fSize;
				while (repeatX > 0)
				{
					repeatX--;
					if (letter[i] & mask)
					{
						writeLCDData(color >> 8);			// Send Most Significant 8 bits of 16 bit color
						writeLCDData(color & 0xff);			// Send Least Significant 8 bits of 16 bit color
					}
					else
					{
						writeLCDData(hColor >> 8);			// Send Most Significant 8 bits of 16 bit White
						writeLCDData(hColor & 0xff);		// Send least Significant 8 bits of 16 bit White
					}
				}
				mask = mask >> 1;
			}
		}
	}
}

void writeLine(char words[], int color, int fSize, int hColor, char align)
{
	unsigned int numLetters = 0;
	unsigned int i = 0;
	unsigned int offset;
	while (words[i] != '\0')
	{
		i++;
		numLetters++;
	}
	if ((4 + (numLetters * 8 * fSize) - 1) > 235)
	{
		startX = 4;
		writeWords("String too Long!", color, 1, hColor);
	}
	else
	{
		offset = 239 - ((numLetters * 8 * fSize));
		fillRectangle(0, 239, startY, startY + 8 * fSize, hColor);
		switch (align)
		{
		default:
			startX = 4;
			break;
		case 'C':
		case 'c':
			startX = offset / 2;
			break;
		case 'R':
		case 'r':
			startX = offset;
			break;
		}
		writeWords(words, color, fSize, hColor);
	}
}

void writeWords(char words[], int color, int fSize, int hColor)
{
	unsigned int numLetters = 0;
	unsigned int i = 0;
	unsigned int j = 0;

	while(words[i] != '\0')
	{
		numLetters = 0;
		while(words[j] != ' ' && words[j] != '\0')
		{
			j++;
			numLetters++;
		}

		if ((startX + (numLetters * 8 * fSize) - 1) > 235)
		{
			startX = (8*fSize);
			startY += (fSize + (8 * fSize));
			if (words[i] == ' ')
			{
				i++;
			}
		}

		while(i < j)
		{
			switch (words[i])
			{
			case 'a':
				drawLetter(font[1], color, fSize, hColor);
				break;
			case 'b':
				drawLetter(font[2], color, fSize, hColor);
				break;
			case 'c':
				drawLetter(font[3], color, fSize, hColor);
				break;
			case 'd':
				drawLetter(font[4], color, fSize, hColor);
				break;
			case 'e':
				drawLetter(font[5], color, fSize, hColor);
				break;
			case 'f':
				drawLetter(font[6], color, fSize, hColor);
				break;
			case 'g':
				drawLetter(font[7], color, fSize, hColor);
				break;
			case 'h':
				drawLetter(font[8], color, fSize, hColor);
				break;
			case 'i':
				drawLetter(font[9], color, fSize, hColor);
				break;
			case 'j':
				drawLetter(font[10], color, fSize, hColor);
				break;
			case 'k':
				drawLetter(font[11], color, fSize, hColor);
				break;
			case 'l':
				drawLetter(font[12], color, fSize, hColor);
				break;
			case 'm':
				drawLetter(font[13], color, fSize, hColor);
				break;
			case 'n':
				drawLetter(font[14], color, fSize, hColor);
				break;
			case 'o':
				drawLetter(font[15], color, fSize, hColor);
				break;
			case 'p':
				drawLetter(font[16], color, fSize, hColor);
				break;
			case 'q':
				drawLetter(font[17], color, fSize, hColor);
				break;
			case 'r':
				drawLetter(font[18], color, fSize, hColor);
				break;
			case 's':
				drawLetter(font[19], color, fSize, hColor);
				break;
			case 't':
				drawLetter(font[20], color, fSize, hColor);
				break;
			case 'u':
				drawLetter(font[21], color, fSize, hColor);
				break;
			case 'v':
				drawLetter(font[22], color, fSize, hColor);
				break;
			case 'w':
				drawLetter(font[23], color, fSize, hColor);
				break;
			case 'x':
				drawLetter(font[24], color, fSize, hColor);
				break;
			case 'y':
				drawLetter(font[25], color, fSize, hColor);
				break;
			case 'z':
				drawLetter(font[26], color, fSize, hColor);
				break;
			case '0':
				drawLetter(font[48], color, fSize, hColor);
				break;
			case '1':
				drawLetter(font[49], color, fSize, hColor);
				break;
			case '2':
				drawLetter(font[50], color, fSize, hColor);
				break;
			case '3':
				drawLetter(font[51], color, fSize, hColor);
				break;
			case '4':
				drawLetter(font[52], color, fSize, hColor);
				break;
			case '5':
				drawLetter(font[53], color, fSize, hColor);
				break;
			case '6':
				drawLetter(font[54], color, fSize, hColor);
				break;
			case '7':
				drawLetter(font[55], color, fSize, hColor);
				break;
			case '8':
				drawLetter(font[56], color, fSize, hColor);
				break;
			case '9':
				drawLetter(font[57], color, fSize, hColor);
				break;
			case 'A':
				drawLetter(font[65], color, fSize, hColor);
				break;
			case 'B':
				drawLetter(font[66], color, fSize, hColor);
				break;
			case 'C':
				drawLetter(font[67], color, fSize, hColor);
				break;
			case 'D':
				drawLetter(font[68], color, fSize, hColor);
				break;
			case 'E':
				drawLetter(font[69], color, fSize, hColor);
				break;
			case 'F':
				drawLetter(font[70], color, fSize, hColor);
				break;
			case 'G':
				drawLetter(font[71], color, fSize, hColor);
				break;
			case 'H':
				drawLetter(font[72], color, fSize, hColor);
				break;
			case 'I':
				drawLetter(font[73], color, fSize, hColor);
				break;
			case 'J':
				drawLetter(font[74], color, fSize, hColor);
				break;
			case 'K':
				drawLetter(font[75], color, fSize, hColor);
				break;
			case 'L':
				drawLetter(font[76], color, fSize, hColor);
				break;
			case 'M':
				drawLetter(font[77], color, fSize, hColor);
				break;
			case 'N':
				drawLetter(font[78], color, fSize, hColor);
				break;
			case 'O':
				drawLetter(font[79], color, fSize, hColor);
				break;
			case 'P':
				drawLetter(font[80], color, fSize, hColor);
				break;
			case 'Q':
				drawLetter(font[81], color, fSize, hColor);
				break;
			case 'R':
				drawLetter(font[82], color, fSize, hColor);
				break;
			case 'S':
				drawLetter(font[83], color, fSize, hColor);
				break;
			case 'T':
				drawLetter(font[84], color, fSize, hColor);
				break;
			case 'U':
				drawLetter(font[85], color, fSize, hColor);
				break;
			case 'V':
				drawLetter(font[86], color, fSize, hColor);
				break;
			case 'W':
				drawLetter(font[87], color, fSize, hColor);
				break;
			case 'X':
				drawLetter(font[88], color, fSize, hColor);
				break;
			case 'Y':
				drawLetter(font[89], color, fSize, hColor);
				break;
			case 'Z':
				drawLetter(font[90], color, fSize, hColor);
				break;
			case '!':
				drawLetter(font[33], color, fSize, hColor);
				break;
			case '?':
				drawLetter(font[63], color, fSize, hColor);
				break;
			case ' ':
				drawLetter(font[32], color, fSize, hColor);
				break;
			case '.':
				drawLetter(font[46], color, fSize, hColor);
				break;
			case '\"':
				drawLetter(font[34], color, fSize, hColor);
				break;
			}
			i++;
		}
		j++;
	}
}

void displayChoices(int * game)
{
	int spacing = 16;
	char score[5];
	game[0] = 4;

	startX = 84;
	startY = 40;
	writeWords("Ones", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Twos", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Threes", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Fours", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Fives", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Sixes", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Three of a Kind", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Four of a Kind", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Full House", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Small Straight", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Large Straight", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("Chance", BLK, 1, WHITE);
	startX = 84;
	startY += spacing;
	writeWords("YAHTZEE", BLK, 1, WHITE);

	startY = 40 - spacing;
	int i = 0;
	for (i; i < 13; i++)
	{
		startY += spacing;
		if (game[i] > -1)
		{
			startX = 195;

			if (game[i] < 10)
				iToC1(score, game[i]);
			else
				iToC2(score, game[i]);
			writeWords(score, BLK, 1, WHITE);
		}
	}
}

void iToC(char cNumber[], int value)
{
	int remainder;
	unsigned char i;
	for (i = 0; i < 4; i++)
	{
		if (value == 0)
			cNumber[3 - i] = '0';
		remainder = (value % 10);
		cNumber[3 - i] = (char) (/*((int) '0')*/0x30 + remainder);
		value = value / 10;
	}
	cNumber[4] = '\0';
}

void iToC1(char cNumber[], int value)
{
	//Single digit output
	int remainder;
	if (value == 0)
		cNumber[0] = '0';
	cNumber[0] = (char)(/*((int) '0')*/0x30 + value);
	cNumber[1] = '\0';
}

void iToC2(char cNumber[], int value)
{
	//Single digit output
	int remainder;
	if (value == 0)
	{
		cNumber[0] = '0';
		cNumber[1] = '0';
	}

	cNumber[1] = (char)(/*((int) '0')*/0x30 + value);
	value = value / 10;
	cNumber[0] = (char)(/*((int) '0')*/0x30 + value);
	cNumber[2] = '\0';
}

void fToC(char cNumber[], float value)
{
	int remainder;
	unsigned char i;
	for (i = 0; i < 4; i++)
	{
		if (value == 0)
			cNumber[3 - i] = '0';
		remainder = ((int)(value * 10) % 10);
		cNumber[3 - i] = (char)(0x30 + remainder);
		if (i == 0)
		{
			i++;
			cNumber[3 - i] = '.';
		}
		value = value / 10;
	}
	cNumber[4] = '\0';
}

int rotateX(int x, int y)
{
	int x1;
	x1 = (int) (x *.7071068 - y * .7071068);
	return x1;
}

int rotateY(int x, int y)
{
	int y1;
	y1 = (int) (x *.7071068 + y * .7071068);
	return y1;
}

void initClk(void)
{
   BCSCTL1 = CALBC1_16MHZ;				// 16 MHz Operation
   DCOCTL = CALDCO_16MHZ;
}

void initPins(void)
{

	P1DIR = LCD_MOSI | LCD_SCK | TS_XP | TS_YM;	// set out put pins for P1
	P2DIR = LCD_RST | LCD_CS |
			LCD_DC & ~BUTTON_A & ~BUTTON_B;		// set out put pins for P2

	P1SEL |= LCD_MOSI + LCD_SCK;
	P1SEL2 |= LCD_MOSI + LCD_SCK;

	ADC10CTL0 = 0x1010; 		// Sample/Hold time and ADC on
	ADC10AE0 = TS_XM | TS_YP; 	// P1.0,P1.1 ADC option select

	P2OUT = LCD_RST | LCD_CS | LCD_DC;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

#pragma INTERRUPT (USCI)
#pragma vector=USCIAB0TX_VECTOR
void USCI(void)
{
	P2OUT|=LCD_CS;						// transmission done
	IFG2&=~UCB0TXIFG;					// clear TXIFG
}
